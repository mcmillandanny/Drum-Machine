{"version":3,"sources":["main.js"],"names":["console","log","clear","AudioContext","window","webkitAudioContext","audioCtx","kickAudio","document","querySelector","kickTrack","createMediaElementSource","kickPLayBtn","addEventListener","state","resume","play","pannerOptions","pan","panner","StereoPannerNode","panSlider","value"],"mappings":";;AAAAA,QAAQC,GAAR,CAAY,cAAZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAMAD,QAAQE,KAAR;;AAEA;;AAEA;AACA,IAAMC,eAAeC,OAAOD,YAAP,IAAuBC,OAAOC,kBAAnD;AACA,IAAMC,WAAW,IAAIH,YAAJ,EAAjB;;AAIA;AACA;AACA,IAAMI,YAAYC,SAASC,aAAT,CAAuB,iBAAvB,CAAlB;AACA,IAAMC,YAAYJ,SAASK,wBAAT,CAAkCJ,SAAlC,CAAlB;AACA,IAAMK,cAAcJ,SAASC,aAAT,CAAuB,iBAAvB,CAApB;;AAGA;;AAEAG,YAAYC,gBAAZ,CAA6B,OAA7B,EAAsC,YAAW;;AAE7C,MAAIP,SAASQ,KAAT,KAAmB,WAAvB,EAAoC;AAChCR,aAASS,MAAT;AACH;;AAEDR,YAAUS,IAAV;AAEH,CARD;;AAYA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACI;;AAEA;AACA;AACA;AACA;;AAEJ;AACA,IAAMC,gBAAgB,EAACC,KAAK,CAAN,EAAtB;AACA,IAAMC,SAAS,IAAIC,gBAAJ,CAAqBd,QAArB,EAA+BW,aAA/B,CAAf;;AAEA,IAAII,YAAYb,SAASC,aAAT,CAAuB,wBAAvB,CAAhB;;AAEAY,UAAUR,gBAAV,CAA2B,OAA3B,EAAoC,YAAW;AAC3CM,SAAOD,GAAP,CAAWI,KAAX,GAAmBD,UAAUC,KAA7B;AACA;AACA;AAEH,CALD;;AAOA;AACA;AACC;AACD","file":"main.js","sourcesContent":["console.log(\"Drum Machine\");\n\n// var snare = new AudioContext(),\n// snareAudioSource = snare.createMediaElementSource(document.querySelector(\".snareAudio\")),\n// filter = snare.createBiquadFilter();\n// snareAudioSource.connect(filter);\n// filter.connect(snare.destination);\n// filter.type = \"lowshelf\";\n// filter.frequency.value = 4000;\n// filter.gain.value = 40;\n\n\n\n\n\nconsole.clear();\n\n// instigate our audio context\n\n// for cross browser\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst audioCtx = new AudioContext();\n\n\n\n// load some sound\n//KICK\nconst kickAudio = document.querySelector('audio.kickAudio');\nconst kickTrack = audioCtx.createMediaElementSource(kickAudio);\nconst kickPLayBtn = document.querySelector('.kickPlayButton');\n\n\n// play pause audio\n\nkickPLayBtn.addEventListener(\"click\", function() {\n\n    if (audioCtx.state === 'suspended') {\n        audioCtx.resume();\n    }\n\n    kickAudio.play();\n\n})\n\n\n\n// kickPLayBtn.addEventListener('click', function() {\n\t\n// \t// check if context is in suspended state (autoplay policy)\n// \tif (audioCtx.state === 'suspended') {\n// \t\taudioCtx.resume();\n// \t}\n\t\n// \tif (this.dataset.playing === 'false') {\n// \t\tkickAudio.play();\n// \t\tthis.dataset.playing = 'true';\n// \t// if kickTrack is playing pause it\n// \t} else if (this.dataset.playing === 'true') {\n// \t\tkickAudio.pause();\n// \t\tthis.dataset.playing = 'false';\n// \t}\n\t\n// \tlet state = this.getAttribute('aria-checked') === \"true\" ? true : false;\n// \tthis.setAttribute( 'aria-checked', state ? \"false\" : \"true\" );\n\t\n// }, false);\n\n\n// if kickTrack ends\n// kickAudio.addEventListener('ended', () => {\n// \tkickPLayBtn.dataset.playing = 'false';\n// \tkickPLayBtn.setAttribute( \"aria-checked\", \"false\" );\n// }, false);\n\n// volume\n    // const gainNode = audioCtx.createGain();\n\n    // const volumeControl = document.querySelector('[data-action=\"volume\"]');\n    // volumeControl.addEventListener('input', function() {\n    //     gainNode.gain.value = this.value;\n    // }, false);\n\n// panning\nconst pannerOptions = {pan: 0};\nconst panner = new StereoPannerNode(audioCtx, pannerOptions);\n\nlet panSlider = document.querySelector('[data-action=\"panner\"]');\n\npanSlider.addEventListener('input', function() {\n    panner.pan.value = panSlider.value; \n    // console.log(panner);\n    // console.log( panSlider.value )\n\n})\n\n// const pannerControl = document.querySelector('[data-action=\"panner\"]');\n// pannerControl.addEventListener('input', function() {\n\t// panner.pan.value = -1; //this.value;\t\n// }, false);\n\n\n\n\n\n\n"]}