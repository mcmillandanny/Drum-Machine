{"version":3,"sources":["main.js"],"names":["console","log","AudioContext","window","webkitAudioContext","audioCtx","analyser","createAnalyser","kickAudio","document","querySelector","snareAudio","clapAudio","hihatAudio","boomAudio","kickTrack","createMediaElementSource","snareTrack","clapTrack","hihatTrack","boomTrack","kickPlayBtn","snarePlayBtn","clapPlayBtn","hihatPlayBtn","boomPlayBtn","lowShelfFilter","createBiquadFilter","type","gain","value","frequency","getRandomColor","letters","color","i","Math","floor","random","addEventListener","connect","destination","event","keyCode","state","resume","play","pannerOptions","pan","panner","StereoPannerNode","panSlider","fftSize","bufferLength","frequencyBinCount","dataArray","Uint8Array","getByteTimeDomainData","canvasElement","canvasCtx","getContext","resizeCanvas","width","innerWidth","height","clearRect","draw","barWidth","barHeight","x","getByteFrequencyData","fillStyle","fillRect","requestAnimationFrame","timeStamp","round","Date","getTime"],"mappings":"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","file":"main.js","sourcesContent":["console.log(\"Drum Machine\");\n\n\n\n// for cross browser\n\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst audioCtx = new AudioContext();\nconst analyser = audioCtx.createAnalyser();\n\n\n\n// load some sound\nconst kickAudio = document.querySelector('audio.kickAudio');\nconst snareAudio = document.querySelector('audio.snareAudio');\nconst clapAudio = document.querySelector('audio.clapAudio');\nconst hihatAudio = document.querySelector('audio.hihatAudio');\nconst boomAudio = document.querySelector('audio.boomAudio');\n\n\n\nconst kickTrack = audioCtx.createMediaElementSource(kickAudio);\nconst snareTrack = audioCtx.createMediaElementSource(snareAudio);\nconst clapTrack = audioCtx.createMediaElementSource(clapAudio);\nconst hihatTrack = audioCtx.createMediaElementSource(hihatAudio);\nconst boomTrack = audioCtx.createMediaElementSource(boomAudio);\n\n\nconst kickPlayBtn = document.querySelector('.kickPlayButton');\nconst snarePlayBtn = document.querySelector('.snarePlayButton');\nconst clapPlayBtn = document.querySelector('.clapPlayButton');\nconst hihatPlayBtn = document.querySelector('.hihatPlayButton');\nconst boomPlayBtn = document.querySelector('.boomPlayButton');\n\n\n\nlet lowShelfFilter = audioCtx.createBiquadFilter();\nlowShelfFilter.type = \"lowshelf\";\nlowShelfFilter.gain.value = 0;\nlowShelfFilter.frequency.value = 4000;\n\nfunction getRandomColor() {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n\n\n\n\n\n// make range slider control lowShelfFilter.frequency.value\ndocument.querySelector('.lowShelfSlider').addEventListener('change', function() {\n    lowShelfFilter.gain.value = this.value;\n})\n\nkickTrack\n    .connect(analyser) \n    .connect(lowShelfFilter) \n    .connect(audioCtx.destination)\n\nsnareTrack\n    .connect(analyser) \n    .connect(lowShelfFilter)\n    .connect(audioCtx.destination)\n    \n\nclapTrack \n    .connect(analyser) \n    .connect(lowShelfFilter)\n    .connect(audioCtx.destination)\n    \n    \n\nhihatTrack\n    .connect(analyser)    \n    .connect(lowShelfFilter)\n    .connect(audioCtx.destination)\n\nboomTrack\n    .connect(analyser)    \n    .connect(lowShelfFilter)\n    .connect(audioCtx.destination)\n    \n   \n\n\n\n// play audio\n\nwindow.addEventListener(\"keydown\", function(event) {\n    console.log(event)\n    if (event.keyCode === 81) { // Q\n\n        if (audioCtx.state === 'suspended') {\n            audioCtx.resume();\n        }\n        snareAudio.play();\n    }\n\n    if (event.keyCode === 87) { // W\n\n        if (audioCtx.state === 'suspended') {\n            audioCtx.resume();\n        }\n        kickAudio.play();\n    }\n    \n    if (event.keyCode === 69) { // E\n\n        if (audioCtx.state === 'suspended') {\n            audioCtx.resume();\n        }\n        clapAudio.play();\n    }\n\n    if (event.keyCode === 82) { // R\n\n        if (audioCtx.state === 'suspended') {\n            audioCtx.resume();\n        }\n        hihatAudio.play();\n    }\n\n    if (event.keyCode === 84) { // T\n        \n        if (audioCtx.state === 'suspended') {\n            audioCtx.resume();\n        }\n        boomAudio.play();\n    }\n\n})\n\n\n\n// volume\n    // const gainNode = audioCtx.createGain();\n\n    // const volumeControl = document.querySelector('[data-action=\"volume\"]');\n    // volumeControl.addEventListener('input', function() {\n    //     gainNode.gain.value = this.value;\n    // }, false);\n\n// panning\nconst pannerOptions = {pan: 0};\nconst panner = new StereoPannerNode(audioCtx, pannerOptions);\nlet panSlider = document.querySelector('[data-action=\"panner\"]');\n\n\npanSlider.addEventListener('input', function() {\n    panner.pan.value = panSlider.value; \n\n})\n\n\n\n// canvas visualizer experiment \n\n\n// analyser.fftSize = 2048;\n// var bufferLength = analyser.frequencyBinCount;\n// var dataArray = new Uint8Array(bufferLength);\n\n\nanalyser.fftSize = 256;\nvar bufferLength = analyser.frequencyBinCount;\nconsole.log(bufferLength);\nvar dataArray = new Uint8Array(bufferLength);\n\n\n\nanalyser.getByteTimeDomainData(dataArray);\n\nlet canvasElement = document.querySelector('#visualizer-canvas');\nlet canvasCtx = canvasElement.getContext('2d');\nlet resizeCanvas = () => {\n    canvasElement.width = window.innerWidth;\n    canvasElement.height = window.innerWidth;\n    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n}\nwindow.addEventListener('load', resizeCanvas)\nwindow.addEventListener('resize', resizeCanvas)\n\n\n\nfunction draw() {\n\n    \n    // console.log(\"draw function!\")\n    // analyser.getByteTimeDomainData(dataArray);\n    // canvasCtx.fillStyle = 'rgb(100, 100, 100)';\n    // canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\n    // canvasCtx.lineWidth = 2;\n    // canvasCtx.strokeStyle = getRandomColor();\n    // canvasCtx.beginPath();\n    // var sliceWidth = WIDTH * 1.0 / bufferLength;\n    // var x = 0;\n\n    // var drawVisual = requestAnimationFrame(draw);\n\n\n    var barWidth = (canvasElement.width / bufferLength)// * 2.5;\n    var barHeight;\n    var x = 0;\n    analyser.getByteFrequencyData(dataArray);\n\n    canvasCtx.fillStyle = 'rgb(0, 0, 0)';\n    canvasCtx.fillRect(0, 0, canvasElement.width, canvasElement.height);\n\n    for(var i = 0; i < bufferLength; i++) {\n        barHeight = dataArray[i]/2;\n        // console.log('barHeight', barHeight)\n\n        canvasCtx.fillStyle = 'rgb(' + (barHeight*2.5) + ',50,50)';\n        canvasCtx.fillRect(x,canvasElement.height-barHeight/2,barWidth,barHeight); // \n        // console.log(x,'  ' , HEIGHT-barHeight/2, '   ', barWidth, '   ', barHeight)\n        // canvasCtx.lineWidth = 2;\n        // canvasCtx.strokeStyle = getRandomColor();\n        // canvasCtx.beginPath();\n        x += barWidth + 1;\n    }\n\n    requestAnimationFrame(draw);\n}; // draw()\n\n\n    // for(var i = 0; i < bufferLength; i++) {\n        \n    //     var v = dataArray[i] / 128.0;\n    //     var y = v * HEIGHT/2;\n        \n    //     if(i === 0) {\n    //         canvasCtx.moveTo(x, y);\n    //     } else {\n    //         canvasCtx.lineTo(x, y);\n    //     }\n        \n    //     x += sliceWidth;\n    // }\n    \n    // for(var i = 0; i < bufferLength; i++) {\n        \n    //     var v = dataArray[i] / 128.0;\n    //     var y = v * HEIGHT/2;\n        \n    //     if(i === 0) {\n    //         canvasCtx.moveTo(x, y);\n    //     } else {\n    //         canvasCtx.lineTo(x, y);\n    //     }\n        \n    //     x += sliceWidth;\n    // }\n    \n    // canvasCtx.lineTo(canvasCtx.width, canvasCtx.height/2);\n    // canvasCtx.stroke();\n    \n    \n    \n\ndraw()\n\n\nlet timeStamp = Math.round(new Date().getTime()/1000)\n\nconsole.log(timeStamp);\n\n\n\n"]}